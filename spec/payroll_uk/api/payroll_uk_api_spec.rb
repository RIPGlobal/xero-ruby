=begin
#Xero Payroll UK

#This is the Xero Payroll API for orgs in the UK region.

The version of the OpenAPI document: 2.3.7
Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for XeroRuby::PayrollUkApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PayrollUkApi' do
  before do
    # run before each test
    @api_instance = XeroRuby::PayrollUkApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PayrollUkApi' do
    it 'should create an instance of PayrollUkApi' do
      expect(@api_instance).to be_instance_of(XeroRuby::PayrollUkApi)
    end
  end

  # unit tests for approve_timesheet
  # approve a timesheet
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param [Hash] opts the optional parameters
  # @return [TimesheetObject]
  describe 'approve_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_benefit
  # create a new benefit
  # @param xero_tenant_id Xero identifier for Tenant
  # @param benefit 
  # @param [Hash] opts the optional parameters
  # @return [BenefitObject]
  describe 'create_benefit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_deduction
  # create a new deduction
  # @param xero_tenant_id Xero identifier for Tenant
  # @param deduction 
  # @param [Hash] opts the optional parameters
  # @return [DeductionObject]
  describe 'create_deduction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_earnings_rate
  # create a new earnings rate
  # @param xero_tenant_id Xero identifier for Tenant
  # @param earnings_rate 
  # @param [Hash] opts the optional parameters
  # @return [EarningsRateObject]
  describe 'create_earnings_rate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee
  # creates employees
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeObject]
  describe 'create_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_earnings_template
  # creates employee earnings template records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param earnings_template 
  # @param [Hash] opts the optional parameters
  # @return [EarningsTemplateObject]
  describe 'create_employee_earnings_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_leave
  # creates employee leave records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param employee_leave 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveObject]
  describe 'create_employee_leave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_leave_type
  # creates employee leave type records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param employee_leave_type 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveTypeObject]
  describe 'create_employee_leave_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_opening_balances
  # creates employee opening balances
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param employee_opening_balances 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeOpeningBalancesObject]
  describe 'create_employee_opening_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_payment_method
  # creates employee payment method
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param payment_method 
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethodObject]
  describe 'create_employee_payment_method test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_salary_and_wage
  # creates employee salary and wage record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param salary_and_wage 
  # @param [Hash] opts the optional parameters
  # @return [SalaryAndWageObject]
  describe 'create_employee_salary_and_wage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employee_statutory_sick_leave
  # creates employee statutory sick leave records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_statutory_sick_leave 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeStatutorySickLeaveObject]
  describe 'create_employee_statutory_sick_leave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employment
  # creates employment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param employment 
  # @param [Hash] opts the optional parameters
  # @return [EmploymentObject]
  describe 'create_employment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_leave_type
  # create a new leave type
  # @param xero_tenant_id Xero identifier for Tenant
  # @param leave_type 
  # @param [Hash] opts the optional parameters
  # @return [LeaveTypeObject]
  describe 'create_leave_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_multiple_employee_earnings_template
  # creates multiple employee earnings template records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param earnings_template 
  # @param [Hash] opts the optional parameters
  # @return [EmployeePayTemplates]
  describe 'create_multiple_employee_earnings_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pay_run_calendar
  # create a new payrun calendar
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_calendar 
  # @param [Hash] opts the optional parameters
  # @return [PayRunCalendarObject]
  describe 'create_pay_run_calendar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_reimbursement
  # create a new reimbursement
  # @param xero_tenant_id Xero identifier for Tenant
  # @param reimbursement 
  # @param [Hash] opts the optional parameters
  # @return [ReimbursementObject]
  describe 'create_reimbursement test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_timesheet
  # create a new timesheet
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet 
  # @param [Hash] opts the optional parameters
  # @return [TimesheetObject]
  describe 'create_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_timesheet_line
  # create a new timesheet line
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param timesheet_line 
  # @param [Hash] opts the optional parameters
  # @return [TimesheetLineObject]
  describe 'create_timesheet_line test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_employee_earnings_template
  # deletes an employee earnings template record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param pay_template_earning_id Id for single pay template earnings object
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_employee_earnings_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_employee_leave
  # deletes an employee leave record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param leave_id Leave id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveObject]
  describe 'delete_employee_leave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_employee_salary_and_wage
  # deletes an employee salary and wages record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param salary_and_wages_id Id for single salary and wages object
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_employee_salary_and_wage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_timesheet
  # delete a timesheet
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param [Hash] opts the optional parameters
  # @return [TimesheetLine]
  describe 'delete_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_timesheet_line
  # delete a timesheet line
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param timesheet_line_id Identifier for the timesheet line
  # @param [Hash] opts the optional parameters
  # @return [TimesheetLine]
  describe 'delete_timesheet_line test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benefit
  # retrieve a single benefit by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param id Identifier for the benefit
  # @param [Hash] opts the optional parameters
  # @return [BenefitObject]
  describe 'get_benefit test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benefits
  # searches benefits
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [Benefits]
  describe 'get_benefits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_deduction
  # retrieve a single deduction by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param deduction_id Identifier for the deduction
  # @param [Hash] opts the optional parameters
  # @return [DeductionObject]
  describe 'get_deduction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_deductions
  # searches deductions
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [Deductions]
  describe 'get_deductions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_earnings_order
  # retrieve a single deduction by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param id Identifier for the deduction
  # @param [Hash] opts the optional parameters
  # @return [EarningsOrderObject]
  describe 'get_earnings_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_earnings_orders
  # searches earnings orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [EarningsOrders]
  describe 'get_earnings_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_earnings_rate
  # retrieve a single earnings rates by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param earnings_rate_id Identifier for the earnings rate
  # @param [Hash] opts the optional parameters
  # @return [EarningsRateObject]
  describe 'get_earnings_rate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_earnings_rates
  # searches earnings rates
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [EarningsRates]
  describe 'get_earnings_rates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee
  # searches employees
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeObject]
  describe 'get_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_leave
  # retrieve a single employee leave record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param leave_id Leave id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveObject]
  describe 'get_employee_leave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_leave_balances
  # search employee leave balances
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveBalances]
  describe 'get_employee_leave_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_leave_periods
  # searches employee leave periods
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :start_date Filter by start date
  # @option opts [Date] :end_date Filter by end date
  # @return [LeavePeriods]
  describe 'get_employee_leave_periods test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_leave_types
  # searches employee leave types
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveTypes]
  describe 'get_employee_leave_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_leaves
  # search employee leave records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaves]
  describe 'get_employee_leaves test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_opening_balances
  # retrieve employee openingbalances
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeOpeningBalancesObject]
  describe 'get_employee_opening_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_pay_template
  # searches employee pay templates
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeePayTemplateObject]
  describe 'get_employee_pay_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_payment_method
  # retrieves an employee&#39;s payment method
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethodObject]
  describe 'get_employee_payment_method test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_salary_and_wage
  # get employee salary and wages record by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param salary_and_wages_id Id for single pay template earnings object
  # @param [Hash] opts the optional parameters
  # @return [SalaryAndWages]
  describe 'get_employee_salary_and_wage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_salary_and_wages
  # retrieves an employee&#39;s salary and wages
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [SalaryAndWages]
  describe 'get_employee_salary_and_wages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_statutory_leave_balances
  # search employee leave balances
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [String] :leave_type Filter by the type of statutory leave
  # @option opts [Date] :as_of_date The date from which to calculate balance remaining. If not specified, current date UTC is used.
  # @return [EmployeeStatutoryLeaveBalanceObject]
  describe 'get_employee_statutory_leave_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_statutory_sick_leave
  # retrieve a statutory sick leave for an employee
  # @param xero_tenant_id Xero identifier for Tenant
  # @param statutory_sick_leave_id Statutory sick leave id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeStatutorySickLeaveObject]
  describe 'get_employee_statutory_sick_leave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_tax
  # searches tax records for an employee
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [EmployeeTaxObject]
  describe 'get_employee_tax test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employees
  # searches employees
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :first_name Filter by first name
  # @option opts [String] :last_name Filter by last name
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [Employees]
  describe 'get_employees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_leave_type
  # retrieve a single leave type by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param leave_type_id Identifier for the leave type
  # @param [Hash] opts the optional parameters
  # @return [LeaveTypeObject]
  describe 'get_leave_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_leave_types
  # searches leave types
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @option opts [Boolean] :active_only Filters leave types by active status. By default the API returns all leave types.
  # @return [LeaveTypes]
  describe 'get_leave_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run
  # retrieve a single pay run by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_id Identifier for the pay run
  # @param [Hash] opts the optional parameters
  # @return [PayRunObject]
  describe 'get_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_calendar
  # retrieve a single payrun calendar by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_calendar_id Identifier for the payrun calendars
  # @param [Hash] opts the optional parameters
  # @return [PayRunCalendarObject]
  describe 'get_pay_run_calendar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run_calendars
  # searches payrun calendars
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [PayRunCalendars]
  describe 'get_pay_run_calendars test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_runs
  # searches pay runs
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @option opts [String] :status By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu&#x3D;{PayRunStatus} to filter the payruns by status.
  # @return [PayRuns]
  describe 'get_pay_runs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_slip
  # retrieve a single payslip by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payslip_id Identifier for the payslip
  # @param [Hash] opts the optional parameters
  # @return [PayslipObject]
  describe 'get_pay_slip test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_slips
  # searches payslips
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_id PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [Payslips]
  describe 'get_pay_slips test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_reimbursement
  # retrieve a single reimbursement by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param reimbursement_id Identifier for the reimbursement
  # @param [Hash] opts the optional parameters
  # @return [ReimbursementObject]
  describe 'get_reimbursement test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_reimbursements
  # searches reimbursements
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @return [Reimbursements]
  describe 'get_reimbursements test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_settings
  # searches settings
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [Settings]
  describe 'get_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_statutory_leave_summary
  # retrieve a summary of statutory leaves for an employee
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :active_only Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned
  # @return [EmployeeStatutoryLeavesSummaries]
  describe 'get_statutory_leave_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timesheet
  # retrieve a single timesheet by id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param [Hash] opts the optional parameters
  # @return [TimesheetObject]
  describe 'get_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timesheets
  # searches timesheets
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
  # @option opts [String] :employee_id By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://…/timesheets?filter&#x3D;employeeId&#x3D;&#x3D;{EmployeeId} to get only the timesheets of a particular employee.
  # @option opts [String] :payroll_calendar_id By default get Timesheets will return all the timesheets for an organization. You can add GET https://…/timesheets?filter&#x3D;payrollCalendarId&#x3D;&#x3D;{PayrollCalendarID} to filter the timesheets by payroll calendar id
  # @return [Timesheets]
  describe 'get_timesheets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_categories
  # searches tracking categories
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [TrackingCategories]
  describe 'get_tracking_categories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for revert_timesheet
  # revert a timesheet to draft
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param [Hash] opts the optional parameters
  # @return [TimesheetObject]
  describe 'revert_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee
  # updates employee
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param employee 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeObject]
  describe 'update_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee_earnings_template
  # updates employee earnings template records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param pay_template_earning_id Id for single pay template earnings object
  # @param earnings_template 
  # @param [Hash] opts the optional parameters
  # @return [EarningsTemplateObject]
  describe 'update_employee_earnings_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee_leave
  # updates employee leave records
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param leave_id Leave id for single object
  # @param employee_leave 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeLeaveObject]
  describe 'update_employee_leave test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee_opening_balances
  # updates employee opening balances
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param employee_opening_balances 
  # @param [Hash] opts the optional parameters
  # @return [EmployeeOpeningBalancesObject]
  describe 'update_employee_opening_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee_salary_and_wage
  # updates employee salary and wages record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param salary_and_wages_id Id for single pay template earnings object
  # @param salary_and_wage 
  # @param [Hash] opts the optional parameters
  # @return [SalaryAndWageObject]
  describe 'update_employee_salary_and_wage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pay_run
  # update a pay run
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_id Identifier for the pay run
  # @param pay_run 
  # @param [Hash] opts the optional parameters
  # @return [PayRunObject]
  describe 'update_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_timesheet_line
  # update a timesheet line
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Identifier for the timesheet
  # @param timesheet_line_id Identifier for the timesheet line
  # @param timesheet_line 
  # @param [Hash] opts the optional parameters
  # @return [TimesheetLineObject]
  describe 'update_timesheet_line test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
