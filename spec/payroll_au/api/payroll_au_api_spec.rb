=begin
#Xero Payroll AU

#This is the Xero Payroll API for orgs in Australia region.

The version of the OpenAPI document: 2.3.7
Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for XeroRuby::PayrollAuApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PayrollAuApi' do
  before do
    # run before each test
    @api_instance = XeroRuby::PayrollAuApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PayrollAuApi' do
    it 'should create an instance of PayrollAuApi' do
      expect(@api_instance).to be_instance_of(XeroRuby::PayrollAuApi)
    end
  end

  # unit tests for create_employee
  # Use this method to create a payroll employee
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee 
  # @param [Hash] opts the optional parameters
  # @return [Employees]
  describe 'create_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_leave_application
  # Use this method to create a Leave Application
  # @param xero_tenant_id Xero identifier for Tenant
  # @param leave_application 
  # @param [Hash] opts the optional parameters
  # @return [LeaveApplications]
  describe 'create_leave_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pay_item
  # Use this method to create a Pay Item
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_item 
  # @param [Hash] opts the optional parameters
  # @return [PayItems]
  describe 'create_pay_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pay_run
  # Use this method to create a PayRun
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run 
  # @param [Hash] opts the optional parameters
  # @return [PayRuns]
  describe 'create_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_payroll_calendar
  # Use this method to create a Payroll Calendars
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payroll_calendar 
  # @param [Hash] opts the optional parameters
  # @return [PayrollCalendars]
  describe 'create_payroll_calendar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_superfund
  # Use this method to create a super fund
  # @param xero_tenant_id Xero identifier for Tenant
  # @param super_fund 
  # @param [Hash] opts the optional parameters
  # @return [SuperFunds]
  describe 'create_superfund test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_timesheet
  # Use this method to create a timesheet
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet 
  # @param [Hash] opts the optional parameters
  # @return [Timesheets]
  describe 'create_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee
  # searches for an employee by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @return [Employees]
  describe 'get_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employees
  # searches employees
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call
  # @return [Employees]
  describe 'get_employees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_leave_application
  # searches for an Leave Application by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param leave_application_id Leave Application id for single object
  # @param [Hash] opts the optional parameters
  # @return [LeaveApplications]
  describe 'get_leave_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_leave_applications
  # searches Leave Applications
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
  # @return [LeaveApplications]
  describe 'get_leave_applications test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_items
  # searches Pay Items
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
  # @return [PayItems]
  describe 'get_pay_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_run
  # searches for an payrun by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_id PayRun id for single object
  # @param [Hash] opts the optional parameters
  # @return [PayRuns]
  describe 'get_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_runs
  # searches PayRuns
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call
  # @return [PayRuns]
  describe 'get_pay_runs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payroll_calendar
  # searches Payroll Calendars
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payroll_calendar_id Payroll Calendar id for single object
  # @param [Hash] opts the optional parameters
  # @return [PayrollCalendars]
  describe 'get_payroll_calendar test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payroll_calendars
  # searches Payroll Calendars
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
  # @return [PayrollCalendars]
  describe 'get_payroll_calendars test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payslip
  # searches for an payslip by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payslip_id Payslip id for single object
  # @param [Hash] opts the optional parameters
  # @return [PayslipObject]
  describe 'get_payslip test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_settings
  # retrieve settings
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [SettingsObject]
  describe 'get_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_superfund
  # searches for an Superfund by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param super_fund_id Superfund id for single object
  # @param [Hash] opts the optional parameters
  # @return [SuperFunds]
  describe 'get_superfund test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_superfund_products
  # searches SuperfundProducts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :abn The ABN of the Regulated SuperFund
  # @option opts [String] :usi The USI of the Regulated SuperFund
  # @return [SuperFundProducts]
  describe 'get_superfund_products test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_superfunds
  # searches SuperFunds
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call
  # @return [SuperFunds]
  describe 'get_superfunds test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timesheet
  # searches for an timesheet by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Timesheet id for single object
  # @param [Hash] opts the optional parameters
  # @return [TimesheetObject]
  describe 'get_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timesheets
  # searches timesheets
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call
  # @return [Timesheets]
  describe 'get_timesheets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_employee
  # Update an Employee
  # Update properties on a single employee
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Employee id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Employee>] :employee 
  # @return [Employees]
  describe 'update_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_leave_application
  # Use this method to update a Leave Application
  # @param xero_tenant_id Xero identifier for Tenant
  # @param leave_application_id Leave Application id for single object
  # @param leave_application 
  # @param [Hash] opts the optional parameters
  # @return [LeaveApplications]
  describe 'update_leave_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_pay_run
  # Update a PayRun
  # Update properties on a single PayRun
  # @param xero_tenant_id Xero identifier for Tenant
  # @param pay_run_id PayRun id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PayRun>] :pay_run 
  # @return [PayRuns]
  describe 'update_pay_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_payslip
  # Update a Payslip
  # Update lines on a single payslips
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payslip_id Payslip id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PayslipLines>] :payslip_lines 
  # @return [Payslips]
  describe 'update_payslip test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_superfund
  # Update a Superfund
  # Update properties on a single Superfund
  # @param xero_tenant_id Xero identifier for Tenant
  # @param super_fund_id Superfund id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Array<SuperFund>] :super_fund 
  # @return [SuperFunds]
  describe 'update_superfund test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_timesheet
  # Update a Timesheet
  # Update properties on a single timesheet
  # @param xero_tenant_id Xero identifier for Tenant
  # @param timesheet_id Timesheet id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Timesheet>] :timesheet 
  # @return [Timesheets]
  describe 'update_timesheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
